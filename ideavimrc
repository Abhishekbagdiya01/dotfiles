" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc





" ==================== General Settings ====================
set scrolloff=5         " Show context lines around cursor
set incsearch           " Incremental search
set number              " Show line numbers
set relativenumber      " Relative line numbers
set clipboard=unnamed   " Use system clipboard

" Define $MYVIMRC for IdeaVim
let $MYVIMRC = expand('~/.ideavimrc')

" Use Q for formatting, disable Ex mode
map Q gq

" ==================== Leader Key ====================
let mapleader=" "       " Set leader key to space

" ==================== WhichKey Configuration ====================
set which-key
set notimeout

let g:WhichKey_FontSize = 10
let g:WhichKey_PrefixColor = "#a403fe"
let g:WhichKey_CommandColor = "#01ffff"
let g:WhichKey_PrefixStyle = "bold"
let g:WhichKey_KeyStyle = "italic"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowTypedSequence = "true"

" ==================== File Navigation ====================
nnoremap <leader>e :action ActivateProjectToolWindow<CR>
let g:WhichKeyDesc_e = "Project Sidebar"

nnoremap <leader>/ :action FindInPath<CR>
let g:WhichKeyDesc_["/"] = "Search in Project (Live Grep)"

nnoremap <leader><leader> :action RecentFiles<CR>
let g:WhichKeyDesc_["<leader>"] = "Recent Files"

nnoremap <leader>o :action FileStructurePopup<CR>
let g:WhichKeyDesc_o = "Outline / File Structure"

" ==================== Terminal ====================
nnoremap <leader>tt :action ActivateTerminalToolWindow<CR>
let g:WhichKeyDesc_tt = "Toggle Terminal"

nnoremap <leader>ts :action StartNewConsole<CR>
let g:WhichKeyDesc_ts = "New Terminal Tab"

" ==================== Buffers & Tabs ====================
nnoremap <leader>bb :action Switcher<CR>
let g:WhichKeyDesc_bb = "Buffer Switcher"

nnoremap <leader>bn :action NewFile<CR>
let g:WhichKeyDesc_bn = "New File"

nnoremap <leader>bd :action CloseEditor<CR>
let g:WhichKeyDesc_bd = "Close Editor Tab"

nnoremap <leader>q :action CloseContent<CR>
let g:WhichKeyDesc_q = "Close Current File"

nnoremap <S-l> :bnext<CR>
nnoremap <S-h> :bprevious<CR>

nnoremap ]b :action NextTab<CR>
nnoremap [b :action PreviousTab<CR>
let g:WhichKeyDesc_"]b" = "Next Tab"
let g:WhichKeyDesc_"[b" = "Previous Tab"

" ==================== Code Actions ====================
nnoremap <leader>cf :action ReformatCode<CR>
let g:WhichKeyDesc_cf = "Reformat Code"

nnoremap <leader>ci :action OptimizeImports<CR>
let g:WhichKeyDesc_ci = "Optimize Imports"

nnoremap <leader>ca :action ShowIntentionActions<CR>
vnoremap <leader>ca :action ShowIntentionActions<CR>
let g:WhichKeyDesc_ca = "Code Action"

nnoremap <leader>cA :action ShowIntentionActions<CR>
let g:WhichKeyDesc_cA = "Source Action"

nnoremap <leader>cc :action RunToCursor<CR>
vnoremap <leader>cc :action RunToCursor<CR>
let g:WhichKeyDesc_cc = "Run to Cursor"

nnoremap <leader>cR :action MoveFile<CR>
let g:WhichKeyDesc_cR = "Rename/Move File"

" ==================== LSP ====================
nnoremap <leader>cl :action LspShowToolWindow<CR>
let g:WhichKeyDesc_cl = "LSP Tool Window"

nnoremap <leader>cC :action LspShowToolWindow<CR>
let g:WhichKeyDesc_cC = "Show LSP Window"

" ==================== Rename & Find ====================
nnoremap <leader>cr :action RenameElement<CR>
let g:WhichKeyDesc_cr = "Rename Symbol"

nnoremap <leader>rn :action RenameElement<CR>
let g:WhichKeyDesc_rn = "Rename Symbol"

nnoremap <leader>gr :action FindUsages<CR>
let g:WhichKeyDesc_gr = "Find Usages"

" ==================== Peek ====================
nnoremap <leader>pd :action ShowQuickDefinition<CR>
let g:WhichKeyDesc_pd = "Peek Definition"

nnoremap <leader>pi :action ShowImplementations<CR>
let g:WhichKeyDesc_pi = "Peek Implementations"

nnoremap <leader>* :action HighlightUsagesInFile<CR>
let g:WhichKeyDesc_* = "Highlight Symbol in File"

" ==================== Docs and Navigation ====================
nnoremap K :action QuickJavaDoc<CR>
nnoremap gK :action ParameterInfo<CR>
nnoremap gd :action GotoDeclaration<CR>
nnoremap gD :action GotoDeclaration<CR>
nnoremap gr :action FindUsages<CR>
nnoremap gI :action GotoImplementation<CR>
nnoremap gy :action GotoTypeDeclaration<CR>
nmap gne <Action>(GotoNextError)
nmap gpe <Action>(GotoPreviousError)

nnoremap <A-n> :action MethodDown<CR>
nnoremap <A-p> :action MethodUp<CR>
nnoremap [[ :action MethodDown<CR>
nnoremap ]] :action MethodUp<CR>
let g:WhichKeyDesc_"[[" = "Go Down (Method)"
let g:WhichKeyDesc_"]]" = "Go Up (Method)"

" ==================== Misc ====================
nnoremap <leader>; A;<Esc>
let g:WhichKeyDesc_";" = "Add Semicolon"

nnoremap <leader>, A,<Esc>
let g:WhichKeyDesc_"," = "Add Comma"nnoremap <leader>? :action IdeavimWhichKey<CR>
let g:WhichKeyDesc_["?"] = "Show WhichKey Menu"

" ==================== Commentary + Yank Highlight ====================
Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-commentary'

" ==================== Insert Mode Enhancements ====================
inoremap <C-n> <Down>
inoremap <C-p> <Up>
inoremap <C-k> <C-o>:action ParameterInfo<CR>

"=======================Stolen from others =================================

" Reload my config
nnoremap <leader>sv :source $MYVIMRC<CR>
let g:WhichKeyDesc_sv = "Reload Config"

" remaps
" redo
nnoremap U <C-r>
" delete current char into black hole register
nnoremap x "_x
" delete previous char into black hole register
nnoremap X "_X
" change rest of word into black hole register
nnoremap cw "_cw
" change word into black hole register
nnoremap ciw "_ciw
" send overwritten text into black hole register
vnoremap p "_dP
" comfort shortcuts
nnoremap <C-d> yyp
" move to first char in line
nnoremap F ^
" select to first char in line
nnoremap vF v^

" select to last char in line
nnoremap vL v$
" goto closing/opening bracket pair
nnoremap B %
" copy current line into clipboard (without newLine)
nnoremap <C-c> ^vg_y
" Select all
nmap <C-a> gg<S-v>G

" better escape
imap jk <Esc>

"surround marked text with ()
xnoremap <leader>s xi ()<ESC>l"_xP
" surround marked text with []
xnoremap <leader>s[ xi []<ESC>l"_xP
xnoremap <leader>s] xi []<ESC>l"_xP
" surround marked text with {}
xnoremap <leader>s{ xi {}<ESC>l"_xP
xnoremap <leader>s} xi {}<ESC>l"_xP

" terminal
nmap <C-t> <Action>(ActivateTerminalToolWindow)
nmap <leader>t <Action>(Terminal.OpenInTerminal)



nmap sv <Action>(SplitVertically)
nmap ss <Action>(SplitHorizontally)
nmap sm <Action>(MoveEditorToOppositeTabGroup)




" debugging
nmap <leader>dc <Action>(Debug)
nmap <leader>ds <Action>(Stop)
nmap <leader>db <Action>(ToggleLineBreakpoint)

" run
nmap <leader>rc <Action>(Run)
nmap <leader>rx <Action>(ChooseRunConfiguration)
nmap <leader>rr <Action>(Rerun)
nmap <leader>rs <Action>(Stop)
nmap <leader>rt <Action>(RunTests)

" todo
nmap <leader>to <Action>(ActivateTODOToolWindow)

" Important --> Close Current Buffer with CMD-4 or Control-4 on Windows
" This allows to close for example the Debugger-Console Windows

" find
nmap <C-f> <Action>(GotoFile)
nmap <C-r> <Action>(RecentFiles)

" zen-mode
nmap <C-z> <Action>(ToggleDistractionFreeMode)

" move line up or down
nmap <C-j> <Action>(MoveLineDown)
nmap <C-k> <Action>(MoveLineUp)


" move line up or down
nmap <C-j> <Action>(MoveLineDown)
nmap <C-k> <Action>(MoveLineUp)


"---------- plugins ----------
" easy motion
Plug 'easymotion/vim-easymotion'
map <leader>J <Plug>(easymotion-s)
map <leader>j <Plug>(easymotion-f)

Plug 'preservim/nerdtree'
map <c-n> :NERDTree<CR>
":NERDTreeFocus
":NERDTreeToggle
map <c-q> :NERDTreeClose<CR>
":NERDTreeFind
":NERDTreeRefreshRoot